<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.holeinone.ssafit.model.dao.CommentDao">

    <select id="selectAllComments" parameterType="Long" resultType="CommentResponse">
        SELECT
            c.comment_id AS commentId,
            c.created_at AS createdAt,
            c.updated_at AS updatedAt,
            c.content,
            u.user_id AS userId,
            u.profile_image AS profileImage,
            u.username AS username,
            u.nickname AS nickname
        FROM comment c
                 JOIN user u ON c.user_id = u.user_id
        WHERE c.post_id = #{postId}
          AND c.is_deleted = false
    </select>

    <select id="selectAllMyComments" parameterType="Long" resultType="CommentResponse">
        SELECT
            c.comment_id AS commentId,
            c.created_at AS createdAt,
            c.updated_at AS updatedAt,
            c.content,
            u.user_id AS userId,
            u.profile_image AS profileImage,
            u.username AS username,
            u.nickname AS nickname,
            p.title AS postTitle
        FROM comment c
        JOIN user u ON c.user_id = u.user_id
        JOIN post p ON c.post_id = p.post_id
        WHERE c.user_id = #{userId}
        AND c.is_deleted = false
    </select>

    <insert id="insertComment" parameterType="Comment">
        INSERT INTO comment (content, created_at, updated_at, is_deleted, depth, user_id, post_id)
        VALUES (#{content}, NOW(), NOW(), false, 0, #{userId}, #{postId})
    </insert>

    <select id="findById" parameterType="Long" resultType="Comment">
        SELECT * FROM comment
        WHERE comment_id = #{commentId}
    </select>

    <update id="updateComment" parameterType="Comment">
        UPDATE comment
        SET content = #{content},
            updated_at = NOW()
        WHERE comment_id = #{commentId}
    </update>

    <select id="hasChildComment" parameterType="Long" resultType="Boolean">
        SELECT EXISTS(
            SELECT 1 FROM comment           -- 1: 존재 여부만 확인
            WHERE parent_id = #{commentId}  -- commentId: (삭제 요청 받은) 부모Id, 자식 댓글을 가지고 있는지 확인
            AND is_deleted = false          -- default: 0(false - 자식 댓글 없다)
        )
    </select>

    <update id="softDeleteComment" parameterType="Long">
        UPDATE comment
        SET is_deleted = true, updated_at = NOW()      -- is_delete = true: soft-delete, true 처리만 하고 db에 남겨둠
        WHERE comment_id = #{commentId}
    </update>
</mapper>